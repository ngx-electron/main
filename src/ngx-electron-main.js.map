{"version":3,"file":"ngx-electron-main.js","sourceRoot":"","sources":["ngx-electron-main.ts"],"names":[],"mappings":"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","sourcesContent":["import {BrowserWindow, ipcMain, Tray, nativeImage, BrowserWindowConstructorOptions, app, Menu} from 'electron';\r\n// import * as electronReload from 'electron-reload';\r\nimport * as path from 'path';\r\nimport * as url from 'url';\r\nimport { autoUpdater } from 'electron-updater';\r\nimport * as http from 'http';\r\nimport {Error} from 'tslint/lib/error';\r\n\r\nlet isInit = false;\r\n// winMap\r\nconst winIdMap = new Map<any, number>();\r\nlet appTray: Tray;\r\n\r\n\r\nlet isServer = false;\r\nlet host;\r\nlet port;\r\n\r\nfunction getArgValue(args: string[], name: string): string | boolean {\r\n    let argNameIndex;\r\n    if (argNameIndex = args.indexOf(name)) {\r\n        const argValueIndex = argNameIndex + 1;\r\n        if (args.length > argValueIndex) {\r\n            return args[argValueIndex];\r\n        } else {\r\n            throw new Error(`请在${name}后输入值`);\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * 新开一个窗口\r\n * @param routerUrl 打开窗口加载的路由名字\r\n * @param options 创建窗口参数 有如下默认值\r\n * hasShadow: true\r\n * frame: false\r\n * transparent: true\r\n * show: false\r\n */\r\nexport function createWindow(routerUrl: string, options: BrowserWindowConstructorOptions = {}, key = routerUrl): BrowserWindow {\r\n    let win = new BrowserWindow({\r\n        hasShadow: true,\r\n        frame: false,\r\n        transparent: true,\r\n        show: false,\r\n        ...options\r\n    });\r\n    console.log(`创建窗口routerUrl：${routerUrl}`);\r\n    if (isServer) {\r\n        const loadUrl = `http://${ host }:${ port }/#${ routerUrl }`;\r\n        console.log(`创建窗口加载服务：${loadUrl}`);\r\n        // electronReload(app.getAppPath(), {\r\n        //     electron: require(`${app.getAppPath()}/node_modules/electron`)\r\n        // });\r\n        win.loadURL(loadUrl);\r\n    } else {\r\n        console.log(`创建本地文件窗口`);\r\n        win.loadURL(` ${ url.format({\r\n            pathname: path.join(app.getAppPath(), `/dist/${ app.getName() }/index.html`),\r\n            protocol: 'file:',\r\n            slashes: true\r\n        }) }#${ routerUrl }`);\r\n    }\r\n    winIdMap.set(key, win.id);\r\n    if (!isServer) {\r\n        win.webContents.openDevTools();\r\n    }\r\n    win.on('ready-to-show', () => {\r\n        win.show();\r\n        win.focus();\r\n    });\r\n    win.on('closed', () => {\r\n        winIdMap.delete(key);\r\n        win = null;\r\n    });\r\n    return win;\r\n}\r\nexport function getWinIdByKey(key: string) {\r\n    return winIdMap.has(key) ? winIdMap.get(key) : null;\r\n}\r\n\r\nexport function initElectronMainIpcListener() {\r\n    if (!isInit) {\r\n        const args = process.argv.splice(2);\r\n        console.log(`初始化ngx-electron-main, 启动参数：${JSON.stringify(args)}`);\r\n\r\n        if (isServer = args.includes('--server')) {\r\n            console.log('加载服务的方式运行');\r\n            port = getArgValue(args, '--port') || 4200;\r\n            host = getArgValue(args, '--host') || 'localhost';\r\n            console.log(`host:${host}`);\r\n            console.log(`port:${port}`);\r\n        }\r\n        isInit = true;\r\n        // 判断是否以服务的形式加载页面\r\n        ipcMain.on('ngx-electron-is-server', event => event.returnValue = isServer);\r\n        // 如果当前以服务的形式加载页面，得到当前服务的port\r\n        ipcMain.on('ngx-electron-get-port', event => event.returnValue = port);\r\n        // 如果当前以服务的形式加载页面，得到当前服务的host\r\n        ipcMain.on('ngx-electron-get-host', event => event.returnValue = host);\r\n        // 是否为mac\r\n        ipcMain.on('ngx-electron-is-mac', event => event.returnValue = isMac());\r\n        // 是否为windows\r\n        ipcMain.on('ngx-electron-is-windows', event => event.returnValue = isWindows());\r\n        // 是否为linux\r\n        ipcMain.on('ngx-electron-is-linux', event => event.returnValue = isLinux());\r\n\r\n        // 用于在渲染进程中监测主进程是否加载此文件\r\n        ipcMain.on('ngx-electron-load-electron-main', () => {});\r\n        // 跟据key获得win对象 同步返回 winId\r\n        ipcMain.on('ngx-electron-get-win-id-by-key', (event, key) =>\r\n            event.returnValue = getWinIdByKey(key));\r\n        // win被创建事件 保存到winMap\r\n        ipcMain.on('ngx-electron-win-created', (event, key, winId) =>\r\n            winIdMap.set(key, winId));\r\n        // win被销毁\r\n        ipcMain.on('ngx-electron-win-destroyed', (event, key) =>\r\n            winIdMap.delete(key));\r\n\r\n        /**\r\n         * 检测是否有新版\r\n         */\r\n        ipcMain.on('ngx-electron-check-for-updates', e => {\r\n            // 执行自动更新检查\r\n            autoUpdater.setFeedURL('http://www.liangshen.sit/chat/latest/win');\r\n            autoUpdater.autoDownload = false;\r\n            autoUpdater.on('error', error => e.sender.send('error', error));\r\n            autoUpdater.on('checking-for-update', () => e.sender.send('checking-for-update'));\r\n            autoUpdater.on('update-available', info => e.sender.send('update-available', info));\r\n            autoUpdater.on('update-not-available', info => e.sender.send('update-not-available', info));\r\n            autoUpdater.checkForUpdates();\r\n        });\r\n        /**\r\n         * 下载新版\r\n         */\r\n        ipcMain.on('ngx-electron-download-update', e => {\r\n            autoUpdater.downloadUpdate();\r\n\r\n            // 更新下载进度事件\r\n            autoUpdater.on('download-progress', progressObj =>\r\n                e.sender.send('ngx-electron-download-progress', progressObj));\r\n            // 下载完成\r\n            autoUpdater.on('update-downloate-downloaded',\r\n                (event, releaseNotes, releaseName, releaseDate, updateUrl, quitAndUpdate) => e.sender.send(\r\n                    'ngx-electron-update-downloate-downloaded', event, releaseNotes, releaseName, releaseDate, updateUrl, quitAndUpdate));\r\n        });\r\n        /**\r\n         * 退出当前版本安装新版\r\n         */\r\n        ipcMain.on('ngx-electron-quit-and-install', () => autoUpdater.quitAndInstall());\r\n    }\r\n}\r\nfunction convertImgToDataURLCanvas(imageUrl, callback) {\r\n    http.get(imageUrl, res => {\r\n        const chunks = []; // 用于保存网络请求不断加载传输的缓冲数据\r\n        let size = 0;　　 // 保存缓冲数据的总长度\r\n        res.on('data', chunk => {\r\n            chunks.push(chunk);　 // 在进行网络请求时，会不断接收到数据(数据不是一次性获取到的)，\r\n            // node会把接收到的数据片段逐段的保存在缓冲区（Buffer），\r\n            // 这些数据片段会形成一个个缓冲对象（即Buffer对象），\r\n            // 而Buffer数据的拼接并不能像字符串那样拼接（因为一个中文字符占三个字节），\r\n            // 如果一个数据片段携带着一个中文的两个字节，下一个数据片段携带着最后一个字节，\r\n            // 直接字符串拼接会导致乱码，为避免乱码，所以将得到缓冲数据推入到chunks数组中，\r\n            // 利用下面的node.js内置的Buffer.concat()方法进行拼接\r\n            // 累加缓冲数据的长度\r\n            size += chunk.length;\r\n        });\r\n\r\n        res.on('end', err => {\r\n            // Buffer.concat将chunks数组中的缓冲数据拼接起来，返回一个新的Buffer对象赋值给data\r\n            const data = Buffer.concat(chunks, size);\r\n            // 可通过Buffer.isBuffer()方法判断变量是否为一个Buffer对象\r\n            console.log(Buffer.isBuffer(data));\r\n            // 将Buffer对象转换为字符串并以base64编码格式显示\r\n            // const base64Img = data.toString('base64');\r\n            // 进入终端terminal,然后进入index.js所在的目录，\r\n            // console.log(`data:image/png;base64,${base64Img}`);\r\n            const image = path.join(app.getAppPath(), `/dist/${app.getName()}/assets/${imageUrl}`);\r\n            console.log('dataurl:' + nativeImage.createFromPath(image).toDataURL());\r\n            callback(nativeImage.createFromDataURL(nativeImage.createFromPath(image).toDataURL()));\r\n            // callback(nativeImage.createFromDataURL(data.toString('base64')));\r\n            // 在终端中输入node index.js\r\n            // 打印出来的就是图片的base64编码格式，格式如下\r\n\r\n        });\r\n\r\n    });\r\n}\r\n\r\nfunction convertImgToDataURLCanvas2(imageUrl) {\r\n    return new Promise((resolve, reject) => {\r\n        http.get(imageUrl, res => {\r\n            const chunks = []; // 用于保存网络请求不断加载传输的缓冲数据\r\n            let size = 0;　　 // 保存缓冲数据的总长度\r\n            res.on('data', chunk => {\r\n                chunks.push(chunk);　 // 在进行网络请求时，会不断接收到数据(数据不是一次性获取到的)，\r\n                // node会把接收到的数据片段逐段的保存在缓冲区（Buffer），\r\n                // 这些数据片段会形成一个个缓冲对象（即Buffer对象），\r\n                // 而Buffer数据的拼接并不能像字符串那样拼接（因为一个中文字符占三个字节），\r\n                // 如果一个数据片段携带着一个中文的两个字节，下一个数据片段携带着最后一个字节，\r\n                // 直接字符串拼接会导致乱码，为避免乱码，所以将得到缓冲数据推入到chunks数组中，\r\n                // 利用下面的node.js内置的Buffer.concat()方法进行拼接\r\n                // 累加缓冲数据的长度\r\n                size += chunk.length;\r\n            });\r\n            res.on('end', err => {\r\n                // Buffer.concat将chunks数组中的缓冲数据拼接起来，返回一个新的Buffer对象赋值给data\r\n                const data = Buffer.concat(chunks, size);\r\n                // 可通过Buffer.isBuffer()方法判断变量是否为一个Buffer对象\r\n                console.log(Buffer.isBuffer(data));\r\n                // 将Buffer对象转换为字符串并以base64编码格式显示\r\n                const base64Img = data.toString('base64');\r\n                // 进入终端terminal,然后进入index.js所在的目录，\r\n                // callback(nativeImage.createFromDataURL(data.toString('base64')));\r\n                // 在终端中输入node index.js\r\n                // 打印出来的就是图片的base64编码格式，格式如下\r\n                resolve(base64Img);\r\n            });\r\n        });\r\n    });\r\n}\r\n/**\r\n * 创建 tray\r\n * @param imageUrl\r\n */\r\nexport function createTray(imageUrl: string) {\r\n\r\n    if (isMac()) {\r\n        return null;\r\n    }\r\n    if (!appTray) {\r\n        if (isServer) {\r\n            // const img = nativeImage.createFromPath(image).toDataURL();\r\n            // convertImgToDataURLCanvas2(`http://${ host }:${ port }/assets/${imageUrl}`).then((base64Img: string) => appTray = new Tray(nativeImage.createFromDataURL(base64Img)));\r\n            const image = path.join(app.getAppPath(), `/dist/${app.getName()}/assets/${imageUrl}`);\r\n            appTray = new Tray(image);\r\n        } else {\r\n            const image = path.join(app.getAppPath(), `/dist/${app.getName()}/assets/${imageUrl}`);\r\n            appTray = new Tray(image);\r\n        }\r\n        ipcMain.on('ngx-electron-tray-created', () => {});\r\n\r\n        ipcMain.on('ngx-electron-set-tray-image', (event, img) => appTray.setImage(img));\r\n\r\n        ipcMain.on('ngx-electron-set-tray-context-menu', (event, template, timestamp) => {\r\n            console.log(JSON.stringify(template));\r\n            appTray.setContextMenu(Menu.buildFromTemplate(template.map((currentValue, index) => {\r\n                return {\r\n                    ...currentValue,\r\n                    click: () => event.sender.send(`ngx-electron-click-tray-context-menu-item-${timestamp}`, index)\r\n                };\r\n            })));\r\n        });\r\n\r\n        ipcMain.on('ngx-electron-tray-on-event', (event, eventName, timestamp) =>\r\n            appTray.on(eventName, (...args) => {\r\n                try {\r\n                    event.sender.send(`ngx-electron-tray-on-${eventName}-${timestamp}`, ...args);\r\n                } catch (e) {\r\n\r\n                }\r\n            }));\r\n\r\n        ipcMain.on('ngx-electron-tray-once-event', (event, eventName, timestamp) =>\r\n            appTray.once(eventName, (...args) => event.sender.send(`ngx-electron-tray-once-${eventName}-${timestamp}`, ...args)));\r\n\r\n        ipcMain.on('ngx-electron-tray-apply-method', (event, methodName, ...args) => appTray[methodName](...args));\r\n\r\n        ipcMain.on('ngx-electron-set-tray-tool-tip', (event, toolTip) => appTray.setToolTip(toolTip));\r\n    }\r\n    return appTray;\r\n}\r\n\r\nexport function isMac() {\r\n    return process.platform === 'darwin';\r\n}\r\n\r\nexport function isWindows() {\r\n    return process.platform === 'win32';\r\n}\r\n\r\nexport function isLinux() {\r\n    return process.platform === 'linux';\r\n}\r\n\r\nexport function getTray() {\r\n    return appTray;\r\n}\r\n\r\n"]}